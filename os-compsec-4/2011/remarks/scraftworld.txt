2012.01.13.20.48.20

Задание 0. Ну вот что с вами делать?

	$ git log -p | grep Bin
	    Evil Binary
	    Binary files /dev/null and b/filework.exe differ

	Ладно. В этом семестре борьба надоела уже. Прощаю. Но в следующем,
	будут двойные минусы за каждый бинарный файл. Предупреждаю :)

Задание 7.

	(1) А магические опции для LD, которые были тут 2011.12.27.15.57.37?

	(2) На разных платформах используются разные соглашения на именование
		extern и global переменных. У меня вот не собирается ничего,
		потому что у Вас имена функций с подчёркиваниями, а в Linux
		они не добавляются компилятором C. В Windows же, наоборот,
		добавляются. И для борьбы с этой напастью в NASM есть опция
		--prefix. Мне, конечно, не сложно переименовать все внешние
		имена вручную, но хотелось бы здесь автоматизма.

2012.01.11.13.46.17

Задание 0. Опять появились злобные Binary. Ведь, существует возможность
	автоматического игнорировать нежелательные файлы

		man gitignore

	Или просто в Google поискать. Файлы вот:

	$ git log -p | grep Bin | grep 'files /dev/null'
	Binary files /dev/null and b/task5/b differ
	Binary files /dev/null and b/task5/b.obj differ
	Binary files /dev/null and b/task5/f.o differ
	Binary files /dev/null and b/task4/4.1/tilemul.exe differ
	Binary files /dev/null and b/task4/4.2/g.obj differ
	Binary files /dev/null and b/task4/4.2/result.exe differ
	Binary files /dev/null and b/filework.exe differ
	
	Тут буквы a (отфильтровано) и b вначале путей означают, что обновление
	через заплатку происходить от версии a к версии b. Эх... Всё же буду
	настойчив в стремлении привить некоторую аккуратность, поэтому
	7 минусов.

Задание 6. Хорошо

Задание 7. Неплохо, но не компилируется:

	$ sh MAKE.sh 
	In file included from /usr/include/features.h:382:0,
	from /usr/include/stdint.h:26,
	from /usr/lib/gcc/x86_64-unknown-linux-gnu/4.6.2/include/stdint.h:3,
	from gpf.c:1:
	/usr/include/gnu/stubs.h:7:27: fatal error: gnu/stubs-32.h: No such file or directory
	compilation terminated.

	Проблема в том, что stdint.h - это определения, работающие при
	компиляции для целевой системы. Если она 64-битовая, а компиляция
	происходит в 32-битовом режиме, то этот заголовок не сработает.

	Поэтому нужно написать программу, которая сгенерирует нужный
	заголовочный файл. Нечто вроде:

	#include <stdio.h>

	#define ifsize(sz, typename) do { \
		if(sz == sizeof(typename)) return #typename; } while(0)

	static const char * deftype(unsigned sz)
	{
		ifsize(sz, unsigned);
		ifsize(sz, unsigned short);
		ifsize(sz, unsigned int);

		fprintf(stderr, "can't detect type of size %u\n", sz);
		return NULL;
	}

	static char *const format =
		"#ifndef uidefshincluded\n"
		"#define uidefshincluded\n\n"
		"typedef %s uint32_t;\n\n"
		"endif\n";

	int main(const int argc, const char *const *const argv)
	{
		printf(format, deftype(4));

		return 0;
	}

	(1) Это было первое замечание.

	(2) Нужно, чтобы обходилась загрузка как можно меньшим числом
		магических чисел. А у Вас есть некое 0x9000. Почему именно
		столько? И в бинарном файле же будет множество нулей, чтобы
		заполнить бустое место.

		И, ведь, можно сделать намного проще. Если Вам нужно
		разместить на первом месте секцию из main.o, Вы можете написать:

			.text ADDR:
			{
				main.o(.text);
				*(.text);
				...
			}

		нечто такое.

2012.01.01.15.33.52

Задание 7. Я так понимаю, оно у Вас ещё не доделано?

2011.12.27.15.57.37

ЗАДАНИЕ 6

Нормально. Но всё же, нужно учитывать, что компиляция Ваших исходников может
осуществляться вообще на очень странной системе. И добавить несколько опций
для компилятора - дело совсем не лишнее. Я забыл про это сказать на занятии,
поэтому не минус, но на будущее, надо так:

	gcc -c -m32 -march=i386
	ld -m elf_i386 --oformat=elf32-i386 --script.

В задании 7 нужно будет это сделать обязательно.

Но кроме этого есть и замечания на минус:

	(1) А почему вы не делаете cli перед началом новой перенастройки
		сегментных регистров, переводу процессора в другой режим
		работы и прочее? Это существенный недочёт, аж на целый
		двойной минус.

2011.12.21.22.54.13

Задача 0.

Перенёс все минусы за бинарные файлы в хранилище в эту задачку. Надо
почитстить.

Задача 6.

Опять у меня проблемы со сборкой:

$ sh MAKE.sh 
: No such file or directory
gcc: fatal error: no input files
compilation terminated.
ld:scr.ld:2: ignoring invalid character `\240' in expression
ld:scr.ld:2: ignoring invalid character `\240' in expression
ld:scr.ld:2: ignoring invalid character `\240' in expression
ld:scr.ld:2: ignoring invalid character `\240' in expression
ld:scr.ld:2: ignoring invalid character `\240' in expression
ld:scr.ld:2: ignoring invalid character `\240' in expression
ld:scr.ld:2: ignoring invalid character `\240' in expression
ld:scr.ld:2: ignoring invalid character `\240' in expression
ld:scr.ld:3: ignoring invalid character `\240' in expression
ld:scr.ld:3: ignoring invalid character `\240' in expression
ld:scr.ld:3: ignoring invalid character `\240' in expression
ld:scr.ld:3: ignoring invalid character `\240' in expression
ld:scr.ld:3: ignoring invalid character `\240' in expression
ld:scr.ld:3: ignoring invalid character `\240' in expression
ld:scr.ld:3: ignoring invalid character `\240' in expression
ld:scr.ld:3: ignoring invalid character `\240' in expression
ld:scr.ld:4: ignoring invalid character `\240' in script
ld:scr.ld:4: ignoring invalid character `\240' in script
ld:scr.ld:4: ignoring invalid character `\240' in script
ld:scr.ld:4: ignoring invalid character `\240' in script
ld:scr.ld:4: ignoring invalid character `\240' in script
ld:scr.ld:4: ignoring invalid character `\240' in script
ld:scr.ld:4: ignoring invalid character `\240' in script
ld:scr.ld:4: ignoring invalid character `\240' in script
ld:scr.ld:5: ignoring invalid character `\240' in script
ld:scr.ld:5: ignoring invalid character `\240' in script
ld:scr.ld:5: ignoring invalid character `\240' in script
ld:scr.ld:5: ignoring invalid character `\240' in script
ld:scr.ld:5: ignoring invalid character `\240' in script
ld:scr.ld:5: ignoring invalid character `\240' in script
ld:scr.ld:5: ignoring invalid character `\240' in script
ld:scr.ld:5: ignoring invalid character `\240' in script
: No such file or directory
objcopy: '1': No such file
'asm: fatal: unable to open input file `a.asm
cat: a: No such file or directory
cat: 2: No such file or directory

2011.12.05.11.35.03

(1) Всё же хотелось бы, чтобы лишние файлы не просто были удалены из некоторой
ревизии, а были полностью убраны из ветви. Делается это примерно так (если Вы
не разобрались с 5 главой "Волшебства Git"):

	1. git branch clean-branch

		создать новую ветвь clean-branch

	2. git checkout clean-branch

		выбрать её

	3. git filter-branch --tree-filter "rm file1; ... rm fileN; true"

		запустить фильтр, который в каждой ревизии будет выполнять
		команду, записанную в --tree-filter; true в конце этой команды
		нужно, чтобы filter-branch не завершилась, когда последний
		rm вернёт не 0 (не true) в случае, если filеN в ревизии не
		найдётся.

	4. Теперь clean-branch будет новой, не совместимой с предыдущей ветвью,
		и её нельзя будет при-merge-ить без проблем к ветви предыдущей,
		да и смысла это иметь не будет (нужно, ведь, избавится от
		ненужных файлов). Поэтому, нужно эту новую ветвь сохранить либо
		в новом хранилище в Github, либо в новой ветви в предыдущем
		хранилище. Так, например:

			git push <хранилище> clean-branch:clean

		Ну. И сообщить мне о названии этой новой ветви, чтобы я смог
		себе её забрать через pull.

Такая вот процедура. Не сложная, на самом деле.

(2) По прежнему не компилируется:

$ clang++ -Wall -pedantic filewrk.cpp -o fw
filewrk.cpp:57:32: error: invalid operands to binary expression ('const char *' and 'char *')
                        pre("Can't open the file \""+argv[stage+1]+"\" for reading");
                            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~
filewrk.cpp:102:2: warning: no newline at end of file [-pedantic]
}

Или вот GCC:

$ g++ -Wall -pedantic filewrk.cpp
filewrk.cpp: In function ‘int main(int, char**)’:
filewrk.cpp:57:45: error: invalid operands of types ‘const char [22]’ and ‘char*’ to binary ‘operator+’
filewrk.cpp:89:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
filewrk.cpp:32:8: warning: unused variable ‘f’ [-Wunused-variable]

(3) Так, файлы теперь Ваша программа все просматривает - это хорошо. Но Вы
теперь убрали исключения совсем, и не отлавливаете ошибки, связанные с тем, что
как для push_back, так и для sort может не хватить памяти. Если Вам нужно
выбрасывать исключения, у которых конструктор принимает Сишную строчку, то
придётся написать нечто вроде:

	#include <iostream>

	struct myexception : std::exception
	{
		myexception(const char *const exstr) : str(exstr) {}
		char const * what() const throw() { return str; }
	private:
		const char *const str;
	};

	int main()
	{
		int i;
		std::cin >> i;

		try
		{
			if(i % 2)
			{
				throw myexception("odd number");
			}
		}
		catch(std::exception const& e)
		{
			std::cout << e.what() << "\n";
		}

		return 0;
	}

Остальное неплохо.

Задача 2.

> Либо мы по-разному представляем себе хорошо отформатированный перловый код, 
> либо в этом повинен github, либо и то, и другое сразу.

Я не великий специалист по Perl, могу что-то не так понимать, но внимание на
себя обратил if, тело которого было отформатировано с двумя разными отступами,
и мне пришлось долго думать о том, что к чему относится.

> Напимер, в mbr plan9 последовательность байтов 55aa встречалась в первых 510
> байтах, но ее, по понятным причинам, никто не принял за сигнатуру.

Да, но заранее, ведь не известно, как секторы хранятся в образе диске. Можно,
конечно, почитать документацию...

Теперь о новой версии. Стало намного лучше. Осталось ещё избавиться от
прерывания цикла по первому совпадению сигнатуры.

И ещё такое пожелание. Я понимаю, конечно, что Perl, но в строчке кода:

	die "Failed to change position in $file" if ( (seek $F, -512, 1) != 1 );

основным является совсем не die, а вызов seek. И он должен стоять на первом
месте. Иначе, намного сложнее разобрать семантику выражения. Наверное, Perl
позволяет писать:

	(seek $F, -512, 1 != 1) or die "failed"

Задача 3.

Видимо, я в прошлый раз не заметил, что в filebuf читается не более 32*512
байтов. Но всё же, хотелось бы ещё и проверки, что файл не содержит большее
количество данных. Иначе, пользователя ждёт сокрушительный сюрприз, когда
его термоядерный реактор взорвётся от того, что половина кода из файла
размером 32*1024 байтов не выполнится.

Задача 4.

Хорошо. Но вот небольшой "секрет" про C-99 (современный C) и C++. Вполне
можно было бы написать так:

	int a[M][N];
	int const (* tileA)[N / TY][TX][TY] = (int (*)[N / TY][TX][TY])a;

TY (TX) - это количество столбцов (строк) в плитке, а TSIZE = TX * TY. После
чего можно было бы обращаться к элементам матрицы так:

	tileA[i / TX][j / TY][i % TX][j % TY]

И умножения, необходимые для вычисления смещения элемента от начала матрицы,
компилятор сам бы вставил.

Задача 5.

Пока без изменений.

2011.12.01.22.15.46

Задача 0. Отлично :) Вижу в логах совместную работу.

Задача 1. (1) Вообще в хранилище исходных файлов не должно быть бинарных
файлов, они и место занимают, и ни к чему там. Надо бы их оттуда убрать. Про
то, как это сделать можно прочитать здесь (перевод Git magic):

	http://dl.dropbox.com/u/281916/delete/book.pdf

Вам нужно посмотреть на filter-branch --tree-filter

(2) Ваша программа не компилируется, вот какие ошибки я получаю:

filewrk.cpp:84:11: error: no matching conversion for functional-style cast from 'const char [17]' to 'std::exception'
                                throw(exception("Bad file content"));
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from filewrk.cpp:3:
In file included from /usr/include/c++/clang-2.9/vector:61:
In file included from /usr/include/c++/clang-2.9/bits/allocator.h:48:
In file included from /usr/include/c++/clang-2.9/x86_64-unknown-linux-gnu/bits/c++allocator.h:34:
In file included from /usr/include/c++/clang-2.9/ext/new_allocator.h:33:
In file included from /usr/include/c++/clang-2.9/new:41:
/usr/include/c++/clang-2.9/exception:60:9: note: candidate constructor (the implicit copy constructor) not viable: no known conversion from 'const char [17]' to 'const std::exception' for 1st argument
  class exception
        ^
/usr/include/c++/clang-2.9/exception:63:5: note: candidate constructor not viable: requires 0 arguments, but 1 was provided
    exception() throw() { }
    ^
1 error generated.

(3) И по исходным текстам, кажется, что она не решает поставленную задачу, ведь,
было оговорено, что из-за некорректных файлов или из-за некорректного их
содержимого, она не должна прекращать обработку оставшихся данных.

Задача 2. (1) Исходный текст на Perl плохо отформатирован. Это на оценку не
повлияет, но всё же, за этим надо следить. (2) А почему Вы так странно ищете
сигнатуру? Perl разве не может искать просто два последовательных байта? Если
не умеет, тогда понятно. Но Perl тогда очень странный. (3) А вот это настоящий
недочёт. Ибо, почему программа написана с расчётом на то, что первые же
байты 0xaa 0x55 окажутся сигнатурой загрузочного сектора? Может же всякое
случиться. По идее, надо бы отыскать все такие возможные блоки, а потом
выбрать один из них.

Задача 3. Недурно, но есть замечания. (1) Почему Вы предполагаете, что
процессор сможет выполнить 32-битовый код, вроде 'mov ecx, 0'? Это в общем-то
никак не гарантируется даже для некоторых современных x86-ых. Программа либо
должна быть целиком 16-ти битовой, или содержать проверку того, что процессор
позволяет выполнять такие инструкции. Установить это можно по регистру флагов,
это описано здесь:

	http://en.wikipedia.org/wiki/EFLAGS

(2) Вычисление CRC32 по таблице - это оптимизация. Скорость же в загрузочном
секторе не особо важна, но важен объём кода и его простота. Поэтому лучше бы
сделать расчёт CRC32 самым простым циклом, у которого и 16-битовый довольно
просто написать. Но это так, пожелание. Не пойдёт в минус.

(3) А правильно ли у Вас загружается блок данных? Был ли код протестирован?
Потому что, код загрузки я нашёл в одном только месте и там данные загружаются
по адресу crctab, а эта память потом перезаписывается.

(4) int 0x13 (соответствующая функция) позволяет считывать данные только с
одной дорожки. А у Вас нигде не проверяется, что предоставленный для обработки
файл длиной 62 оставшихся для работы сектора (ну, если не развивать мысль о
загрузчике для больших файлов) не помещается. То что, было сказано, что файл
будет меньше 30K, ещё не означает, что глупый пользователь не передал файл
больше.

Задача 4. (1) Разве в tilemul производится умножение матриц, расположенных
тайлами? Если я не ошибаюсь, там происходит умножение блоков, из которых
состоят матрицы друг на друга. Или я ошибаюсь? Но, кажется, нет. Ведь,
каждое i:j для матрицы результата встречается один раз, и для вычисления
этого элемента используются кусочки строки и столбца длиной по 32 элемента.

(2) Не забывайте, что говорилось об оптимизаторах в компиляторах. О том, что
они могут выкинуть код из программы, который не выводит ничего вовне.

Задача 5. (1) Нужно, чтобы функция, печатающая результат операции над числами в
ассемблерной функции вызывалась из этой ассемблерной функции. (2) Исполняемые и
объектные файлы в хранилище - это не то, что нужно. Лучше запишите в него файл
с командами для компиляции и сборки программы.
