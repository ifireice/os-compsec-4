2011.05.18.15.49.41

Задача 2. Как-то она странно себя ведёт. Задание, ведь было в том, чтобы
по получению сигнала выдать номер процесса (свой собственный pid) и номер
группы, в которую входит этот процесс (свой собственный pgid).

2011.05.28.11.38.46

Задачи 5. А у меня опять не компилируется:

	$ g++ -O3 dekker.cpp -o dkr 
	dekker.cpp: In function ‘void* dekker(int)’:
	dekker.cpp:37:23: error: too few arguments to function ‘void critical_function(int)’
	dekker.cpp:12:7: note: declared here
	dekker.cpp:41:20: error: too many arguments to function ‘void mfence_c()’
	dekker.cpp:17:6: note: declared here
	dekker.cpp: In function ‘int main()’:
	dekker.cpp:51:51: error: invalid conversion from ‘void* (*)(int)’ to ‘void* (*)(void*)’ [-fpermissive]
	/usr/include/pthread.h:225:12: error:   initializing argument 3 of ‘int pthread_create(pthread_t*, const pthread_attr_t*, void* (*)(void*), void*)’ [-fpermissive]
	dekker.cpp:58:47: error: invalid conversion from ‘void* (*)(int)’ to ‘void* (*)(void*)’ [-fpermissive]
	/usr/include/pthread.h:225:12: error:   initializing argument 3 of ‘int pthread_create(pthread_t*, const pthread_attr_t*, void* (*)(void*), void*)’ [-fpermissive]
	dekker.cpp:58:47: error: invalid conversion from ‘int’ to ‘void*’ [-fpermissive]
	/usr/include/pthread.h:225:12: error:   initializing argument 4 of ‘int pthread_create(pthread_t*, const pthread_attr_t*, void* (*)(void*), void*)’ [-fpermissive]

И ещё одна проблема: почему dekker_without_mfence - это .h файл? Компилятор
такого не понимает.

Но это только лишь во-первых. Во-вторых, посмотрите, пожалуйста, что Вам выдаст
после компиляции кода без mfence компилятор. Посмотреть можно так:

	g++ -O3 -S -masm=intel имя-файла.cpp -o имя-файла.asm

Из этого должно быть понятно, что у Вас пока не совсем алгоритм Деккера
написан, для которого очень важно, что обращения происходят именно к ячейкам
памяти.

В третьих, почему именно так расставлен mfence? И вообще, зачем именно нужно
ставить mfence?

Задача 3. Хм. Нет, оно, конечно, всё красиво и почти замечательно. Но... Эх.
Но что ж в Вашей группе такая нелюбовь к операционным системам? Их же
специально пишут для всякой синхронизации между процессами, но нет, многие из
вас используют флаги.

Но мы же обсуждали, что это не будет работать. 100 процессов (среди которых
тот, который выполняет process()), обращаются к flag. 99 хотят записать
туда false, а этот 1 читает, чтобы проверить fr.

Ну. Замечательно. Этот 1 видит там true, а другие устанавливают его в false,
и всё ломается.

Более того, если всё здесь не сломается, то когда дело дойдёт до освобождения
в client_handler, то когда он сделает value->release(), то буфер будет сочтён
освобождённым, но ещё же 98 клиентов выводят эти данные.

Схему взаимодействия надо переписать.

2011.05.29.17.23.21

Задача 5.(+1) Компилируется. Это плюс. Но по-прежнему: не выдаётся результат
работы двух нитей; и то, что написано - это не алгоритм Деккера, для которого
важно, что работа происходит не с регистрами процессора, а с памятью.

Задача 5. Аналогично

Задача 4. К сожалению, стало хуже.

Во-первых, не компилируется:

	$ g++ -c life.cpp
	life.cpp:87:1: error: ‘volontile’ does not name a type
	life.cpp: In function ‘int client_handler(void*)’:
	life.cpp:110:18: error: ‘_time’ was not declared in this scope
	life.cpp:112:10: error: ‘last_time’ was not declared in this scope
	life.cpp: In function ‘int process(void*)’:
	life.cpp:141:3: error: ‘game_state’ was not declared in this scope
	life.cpp:141:14: error: expected ‘;’ before ‘next’
	life.cpp:142:3: error: ‘_time’ was not declared in this scope
	life.cpp:143:44: error: ‘next’ was not declared in this scope
	life.cpp:147:1: error: a function-definition is not allowed here before ‘{’ token
	life.cpp:197:1: error: expected ‘}’ at end of input

И вообще вызывает удивление, что Вы пытаетесь сдать задачу, которая даже
не компилируется. А как Вы проверяли, что она вообще работает?

Во-вторых, даже если бы компилировалась. То возникает вопрос: а с чего Вы взяли,
что контейнеры STL по-умолчанию являются thread safe структурами? То есть,
такими, которые нормально работают при использовании их во многих нитях. STL
заточена под однопоточную производительность, поэтому, нет там никакой
поддержки многопоточности.

В-третьих, ну а какая разница, флаги Вы используете или время? Ну, время, оно,
конечно, интереснее. Но с точки зрения корректного доступа к переменной,
это тот же самый бардак, только вид с боку.

	У Вас 100 клиентов читают этот _time, видят старое значение, а 101
	нить, делает _time++, и ожидает, что все другие увидят это изменение,
	и их буферы будут записан в map с новой временной меткой. Но,
	это же не так. И на следующей итерации будут радостно удалены те
	буферы, из которых данные всё ещё выводятся.

В итоге - полная каша. Я не понимаю, почему Вы так пишете? Столько
гипер-усложнения в относительно несложной программе. А самое главное - всё
равно сделано очень примитивно и неверно.
