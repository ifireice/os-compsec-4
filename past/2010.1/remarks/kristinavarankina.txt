Задачка 2. Это решение мне раза 4 показывали. Поэтому надо бы добавить в неё пару-тройку свойств. Давайте так. Сделайте, чтобы программа сортировала данные только если смогла открыть все файлы. Если что-то не открылось, то она должна сообщить об ошибке и завершиться, не создавая файла с результатами.

Задача 3. Такая же ситуация. Измените программу так, чтобы... Ну, скажем, так, чтобы вывод надписи осуществлялся прямой записью в видеопамять, которая по адресу 0xb8000.

2011.06.24.12.20.18

Задача 2: Нельзя использовать в обработчике сигнала puts - это не
реентерабельная функция. 

Задача 4.(-1): Во-первых, я не понимаю, каким таким магическим образом вы
проверяете корректность работы программ, если они даже не компилируются?

Во-вторых, в программе должна быть другая логика, потому что, смотрите, какая
ерунда (это когда я ошибку исправляю). Запускаю так:

	$ clang++ -O4 1.cpp -o 1 && ./1 0 < 1.cpp

А потом смотрю на загрузку процессора и вижу:

	$ ps -C 1 -o %cpu
	%CPU
	100

То есть, программа загружает процессор на 100 процентов. Это как-то черезмерно
расточительно.

Задача 5: Неверный алгоритм реализован. Нужно не счётчик догонять до некоторого
значения (это всегда можно сделать, и ошибка не будет замечена), а определённое 
количество раз выполнить операцию counter += 1 в каждой из нитей.

Задача 5.(+1): Эмс... А какой загадочный, философский смысл вложен вот в эту
строчку?

	#define mfence() asm volatile ("":::"memory")

Плюс замечания на тему того, что алгоритм неверный.
