2011.12.02.14.24.42

Задача 0.

(1, 2 и 3) Объектные и исполняемые файлы не должны включаться в хранилище.
Надо бы их изничтожить при помощи команды git filter-branch. Подробности
здесь:

	http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/ru/ch05.html

Задача 1.

Вообще, логика правильная, и хорошо, что Вы попробовали обработку ошибок
при помощи switch. Но...

(1) В каждом файле может быть множество чисел и их надо прочитать все. Чтобы
подстраивать выделенную под массив чисел область памяти под необходимый объём
можно использовать функцию

	realloc.

И не забудьте учесть, что чисел в файлах может быть больше, чем (1 << 32) штук.

Задача 2.

(1) То же самое у Вас сделано неверное предположение, что и у многих. Почему
предполагается, что байты сигнатуры могут встречаться исключительно в конце
загрузочного сектора? Они даже в 10000 первых файлах могут оказаться по некой
другой причине.

Нужно искать все возможные 512-байтовые последовательности, являющиеся
кандидатами на то, что они являются загрузочными секторами.

И вообще, несложно, ведь, искать cигнатуру по всему файлу, а не только в первых
нескольких килобайтах, при помощи чтения байтов функцией fgetc, а потом
сдвигаться по файлу при помощи

	fseek(file, -512, SEEK_CUR)

С учётом проверки ошибок, конечно.

Задача 3.

Весьма неплохо, но...

(1) Ошибки! Ведь, read не идеален. А длину файла можно узнать при помощи

	fseek(file, 0, SEEK_END);
	size = ftell(file);

(2) Исходный текст на ассемблере можно сделать одной строкой, а в нужные места
вставить как раз всякие разные %X

Вместо

	"mov ax, 0x1301",
	"mov bx, 0x0007",
	"mov cx, end2-str2",
	"mov bp, str2",
	"int 0x10",
	"_4:",
	"crc32:",
	//dd 0xololo, pos 49
	"crcpoly:",
	"        dd 0xEDB88320",
	"crcval:",

Можно написать

	"...
	mov ax, 0x1301\n
	mov bx, 0x0007\n
	mov cx, end2-str2\n
	mov bp, str2\n
	int 0x10\n
	_4:\n
	crc32:\n
		dd 0x%x\n
	crcpoly:\n
	        dd 0xEDB88320\n
	crcval:\n
	..."

И вывести весь код загрузочного сектора за один printf. Это всё сказано к тому,
что мистические индексы вроде 49, 54, ..., 61 - они слишком мистические. А если
захочется немного подкорректировать исходный текст загрузочного сектора? А
через несколько минут Вам захочется это сделать.

(3) Нельзя расчитывать, что процессор, на котором Вы собираетесь использовать
свой загрузчик сможет выполнять 32-битовый код. Это нужно проверять специальным
образом. О том, как это сделать можно посмотреть вот тут:

	http://code.google.com/p/solace-os/wiki/Kernel
	http://en.wikipedia.org/wiki/FLAGS_register_(computing)

Нужно либо добавить эту проверку в код загрузочного сектора, либо добавить
этот код в загрузочный сектор, либо просто написать CRC32 на 16-битовых
регистрах, прямолинейный, без всяческих таблиц, это достаточно просто.

Задача 4. Замечательно.

Задача 5. 

(1) Нужно вызвать printf или процедуру печати из ассемблера. И добавить в
хранилище файл с командами сборки программы вместе.
