2011.12.27.19.11.46

Без изменений

2011.12.23.13.35.20

Задача 2. Вообще, логика красивая. Но

	(1) Обработка ошибок. Файлы могут не прочитаться, могут не записаться.

	(2) Если Вы формируете строки в памяти, то нужно следить за
		переполнениями памяти. Существует функция snprintf (с буковкой
		n).

Задача 3. Ок. Исходник хороший, но не компилируется:
	
	task4.c:91:1: error: unknown type name 'uint_least32_t'
	uint_least32_t Crc32(unsigned char *buf, size_t len)
	^
	task4.c:93:5: error: use of undeclared identifier 'uint_least32_t'
	    uint_least32_t crc_table[256];
	    ^
	task4.c:94:5: error: use of undeclared identifier 'uint_least32_t'
	    uint_least32_t crc; int i, j;
	    ^
	task4.c:98:9: error: use of undeclared identifier 'crc'
		crc = i;
		^
	task4.c:100:13: error: use of undeclared identifier 'crc'
		    crc = crc & 1 ? (crc >> 1) ^ 0xEDB88320UL : crc >> 1;
		    ^
	task4.c:100:19: error: use of undeclared identifier 'crc'
		    crc = crc & 1 ? (crc >> 1) ^ 0xEDB88320UL : crc >> 1;
			  ^
	task4.c:100:30: error: use of undeclared identifier 'crc'
		    crc = crc & 1 ? (crc >> 1) ^ 0xEDB88320UL : crc >> 1;
				     ^
	task4.c:100:57: error: use of undeclared identifier 'crc'
		    crc = crc & 1 ? (crc >> 1) ^ 0xEDB88320UL : crc >> 1;
								^
	task4.c:103:9: error: use of undeclared identifier 'crc_table'
		crc_table[i] = crc;
		^
	task4.c:103:24: error: use of undeclared identifier 'crc'
		crc_table[i] = crc;
			       ^
	task4.c:106:5: error: use of undeclared identifier 'crc'
	    crc = 0xFFFFFFFFUL;
	    ^
	task4.c:109:3: error: use of undeclared identifier 'crc'
			crc = crc_table[(crc ^ *buf++) & 0xFF] ^ (crc >> 8);
			^
	task4.c:109:9: error: use of undeclared identifier 'crc_table'
			crc = crc_table[(crc ^ *buf++) & 0xFF] ^ (crc >> 8);
			      ^
	task4.c:109:20: error: use of undeclared identifier 'crc'
			crc = crc_table[(crc ^ *buf++) & 0xFF] ^ (crc >> 8);
					 ^
	task4.c:109:45: error: use of undeclared identifier 'crc'
			crc = crc_table[(crc ^ *buf++) & 0xFF] ^ (crc >> 8);
								  ^
	task4.c:113:12: error: use of undeclared identifier 'crc'
	    return crc ^ 0xFFFFFFFFUL;
		   ^
	task4.c:149:3: warning: implicitly declaring C library function 'exit' with type 'void (int) __attribute__((noreturn))'
			exit(1);
			^
	task4.c:149:3: note: please include the header <stdlib.h> or explicitly provide a declaration for 'exit'
	task4.c:167:2: warning: implicit declaration of function 'system' is invalid in C99 [-Wimplicit-function-declaration]
		system("nasm check -o checkbin");
		^
2 warnings and 16 errors generated.

Задача 5. Хорошо.

Задание 6. Общее такое предложение: иногда удобно в скрипты для Bash в самое
	начало дописывать set -e, чтобы они останавливались при возникновении
	первой же ошибки.

	И нужно учитывать, что сборка может осуществляться совсем на другой
	системе, отличной от i386. Поэтому неплохо было бы в опции для
	gcc добавить:

		-m32 -march=i386
	
	И, соответственно, для ld:

		-m elf_i686 --oformat=elf32-i386

	А вообще, хорошо. Вроде, работает. Вы разобрались, в чём была ошибка?
	

2011.12.05.14.47.17

Общее такое замечание: стиль записи без пробелов он, конечно, имеет право на
смысл :) но это же очень хитрый стиль. Он не сводится к тому, что вообще всё
пишем без пробелов, а к тому, что по необходимости группируются вместе кусочки
строки кода, связанные операторами с большим приоритетом.

	Не вот так вот:
		
		while(ints!=NULL&&fscanf(file, "%d", &x)&&feof(file)==0)

	А вот так вот:

		while(ints!=NULL && fscanf(file,"%d",&x) && feof(file)==0)

Ну и применяется он обычно, либо для сложных выражений, чтобы выделить
составные части, либо, когда места в одной строке не хватает, и надо что-то
сжать вместе, и тогда сжимают выражения вокруг более приоритетных операторов
сначала.

Иначе же... Чукча в моём лице не писатель, а читатель, и такой равномерно
плотный код очень сложно воспринимать, даже с подсветкой синтаксиса.

Задача 0.

++

Задача 1.

(1) Старый минус убираю, но появляется новый, связанный с тем, что Вы
используете два прохода по файлу. В этом нет необходимости. Возможно же
сделать так:

	1. Завести дополнительную переменную buflen, в которую будет
		заносится текущая длина буфера.

	2. При каждом новом успешно прочтённом числе, нужно:
		2.1. Проверить верно ли, что n + 1 <= buflen, и если да, то
			вставить число.

		2.2. Если не верно, то надо буфер сделать больше, например,
			в два раза, чтобы как можно реже заниматься выделением
			новой памяти:

				ints = realloc(ints, buflen * 2 * sizeof(int));
				if(ints){ buflen *= 2; insert(...); n += 1}

Примерно так.

Задание 2.

Без изменений.

Задание 3.

Хорошо. Но...

(1) Ошибки. Здесь вполне можно воспользоваться ещё одним эмс... каналом
обработки ошибок в OS -- просто через выход. Когда программа выполняет
процедуру exit() это приводит к завершению процесса с закрытием всего,
что можно, сбросом данных на диск.

Поэтому вместо 

	for(j=0;j<read;++j){
		fprintf(f,"db 0x%X\n",buffer[j]);
	}

можно написать нечто вроде:

	for(j=0; j<read; j+=1) {
		if(fprintf(f, "db 0x%X\n", buffer[j]) > 0) {} else {
			fprintf(stderr, "error\n"); exit(1)
		}
	}

Задание 4.

2011.12.02.14.24.42

Задача 0.

(1, 2 и 3) Объектные и исполняемые файлы не должны включаться в хранилище.
Надо бы их изничтожить при помощи команды git filter-branch. Подробности
здесь:

	http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/ru/ch05.html

Задача 1.

Вообще, логика правильная, и хорошо, что Вы попробовали обработку ошибок
при помощи switch. Но...

(1) В каждом файле может быть множество чисел и их надо прочитать все. Чтобы
подстраивать выделенную под массив чисел область памяти под необходимый объём
можно использовать функцию

	realloc.

И не забудьте учесть, что чисел в файлах может быть больше, чем (1 << 32) штук.

Задача 2.

(1) То же самое у Вас сделано неверное предположение, что и у многих. Почему
предполагается, что байты сигнатуры могут встречаться исключительно в конце
загрузочного сектора? Они даже в 10000 первых файлах могут оказаться по некой
другой причине.

Нужно искать все возможные 512-байтовые последовательности, являющиеся
кандидатами на то, что они являются загрузочными секторами.

И вообще, несложно, ведь, искать cигнатуру по всему файлу, а не только в первых
нескольких килобайтах, при помощи чтения байтов функцией fgetc, а потом
сдвигаться по файлу при помощи

	fseek(file, -512, SEEK_CUR)

С учётом проверки ошибок, конечно.

Задание 5.

Без изменений.

Весьма неплохо, но...

(1) Ошибки! Ведь, read не идеален. А длину файла можно узнать при помощи

	fseek(file, 0, SEEK_END);
	size = ftell(file);

(2) Исходный текст на ассемблере можно сделать одной строкой, а в нужные места
вставить как раз всякие разные %X

Вместо

	"mov ax, 0x1301",
	"mov bx, 0x0007",
	"mov cx, end2-str2",
	"mov bp, str2",
	"int 0x10",
	"_4:",
	"crc32:",
	//dd 0xololo, pos 49
	"crcpoly:",
	"        dd 0xEDB88320",
	"crcval:",

Можно написать

	"...
	mov ax, 0x1301\n
	mov bx, 0x0007\n
	mov cx, end2-str2\n
	mov bp, str2\n
	int 0x10\n
	_4:\n
	crc32:\n
		dd 0x%x\n
	crcpoly:\n
	        dd 0xEDB88320\n
	crcval:\n
	..."

И вывести весь код загрузочного сектора за один printf. Это всё сказано к тому,
что мистические индексы вроде 49, 54, ..., 61 - они слишком мистические. А если
захочется немного подкорректировать исходный текст загрузочного сектора? А
через несколько минут Вам захочется это сделать.

(3) Нельзя расчитывать, что процессор, на котором Вы собираетесь использовать
свой загрузчик сможет выполнять 32-битовый код. Это нужно проверять специальным
образом. О том, как это сделать можно посмотреть вот тут:

	http://code.google.com/p/solace-os/wiki/Kernel
	http://en.wikipedia.org/wiki/FLAGS_register_(computing)

Нужно либо добавить эту проверку в код загрузочного сектора, либо добавить
этот код в загрузочный сектор, либо просто написать CRC32 на 16-битовых
регистрах, прямолинейный, без всяческих таблиц, это достаточно просто.

Задача 4. Замечательно.

Задача 5. 

(1) Нужно вызвать printf или процедуру печати из ассемблера. И добавить в
хранилище файл с командами сборки программы вместе.
