SCraftworld
	0 ++; 1 +; 2 ++; 3 ++; 4 +; 5 +; 6 +; 7 ++ : ++

alatielle
	0 ++; 1 +; 2 ++; 3 ++; 4 +; 5 +; 6 +; 7 ++ : ++

cman-rus
	0 ++; 1 +; 2 +; 3 +; 4 ++; 5 +; 6 ++; 7 ++++; 8 : ++

evilenka
	0 ++; 1 ++; 2 +++; 3 ++; 4 ++; 5 +; 6 +; 7 ++ : ++

Erop147
	0 ++; 1 ++; 2 ++; 3 ++; 4 ++; 5 +

--

Logioniz
	0 +; 1 ++; 2 +; 3 +; 4 +-+; 5 ++; 6 +; 7 +-

pokerfaceOo
	0 +; 1 +++; 2 ++; 3; 4 +; 5 ++; 6 +---

xxabzcbxacz
	0 +-; 1 +; 2 +

ColMatrix
	0 +; 1 +; 2 +-; 3 +---; 4 +; 5 +; 6 +--

andrew-iv-os
	0 ++--; 1 ; 2 ++-; 3 +-; 4 +-+; 5 +++; 6 +; 7 +---;

Nadegdadoronina
	0 +; 1 +; 2 +---; 3 +---; 4 ++; 5; 6 +++

Anutka-Resh
	
	0 +; 1 +; 2 +; 3 +-; 4 ++; 5 +-; 6 ++



Задачи. Семестр 1.

	0. Нужно зарегистрировать аккаунт на GitHub и опубликовать в нём
		программу 'Hello world'.

	1. Нужно написать программу, которой при запуске в качестве нескольких
		первых аргументов передаются имена исходных файлов. В которых,
		предположительно, должны быть записаны числа в текстовом виде,
		разделённые пробельными символами (так, что fscanf(f, "%d", &x)
		должен читать их последовательно). В качестве последнего
		аргумента программе передаётся имя файла, в который нужно
		записать прочитанные из исходных файлов и отсортированные
		числа.

		Следует учесть.

			1.1. Некоторые имена файлов могут быть указаны неверно.

			1.2. В некоторых файлах могут быть данные отличные от
				списков целых чисел в текстовом представлении.

		Программа должна по возможности ( ещё может не хватать памяти)
		отсортировать числа из корректных файлов.

	2. При выполнении этого задания нужно создать образ виртуального
		диска для эмулятора QEMU, на который нужно установить ОС Plan9,
		загрузив её из образа CD формата iso9660, доступного по адресу:

			http://0xfb.imm.uran.ru/tmp/plan9.iso.bz2

		Затем, используя знание о том, что загрузочный сектор на диске
		имеет размер 512 байтов и оканчивается байтами 0x55 0xaa, нужно
		написать программу, которая найдёт этот загрузочный сектор
		в образе виртуального диска с установленной Plan9 и запишет
		его в некий файл.
		
		Задание будет считаться выполненным, если в хранилище будут
		записаны программа поиска загрузочного сектора в образе диска и
		дизассемблированный загрузочный сектор (для этого можно
		использовать дизассемблер из пакета ассемблера NASM).

	3. Следует написать программу, которая по указанному ей файлу F создаёт
		новый файл I, который должен быть загружаемым (с загрузочным
		сектором) образом дискеты в QEMU. Загрузочный сектор должен
		быть устроен так, что он загружает данные файла F (которые
		размещаются на образе дискеты) и передаёт на них управление.
		 
		Кроме этого при формировании файла I должна быть подсчитана
		контрольная сумма CRC32 от данных в файле F, а после загрузки
		этих данных программа загрузчика должна проверить эту сумму. И
		управление на данные (код - это тоже данные) файла F должно
		передаваться только в случае успешности загрузки и проверки
		CRC32, иначе, должно быть выдано сообщение об ошибке.

		Следует учесть, что...
			
			3.1. Так как за одно обращение к BIOS можно прочитать
				данные только с одной дорожки, то можно
				ограничится работой с F-файлами размером не
				больше 30 * 1024 байтов. Но следует помнить,
				что пользователь - лопух, и может указать
				программе более файл большей длины.

	4. Для оценки влияния страничной трансляции адресов на эффективность
		выполнения кода следует сравнить скорости работы двух программ
		умножения матриц, которые можно обозначить R и T. Обе должны
		умножать матрицы одинаковых размеров, а отличие этих программ
		должно быть следующим.
		
		Программа R (rows) должна трактовать матрицы, как обычные
		двумерные массивы Си, расположенные по строкам. Напоминание:
		массив 'int a[X][Y]' содержит в себе X строк, каждая из которых
		содержит Y элементов. Строки располагаются в памяти друг за
		другом.  Поэтому переход между разными строками (от a[i][j] к
		a[i + c][j]) при достаточно длинных строках может привести к
		переходу между страницами.

		Программа T (tiles) должна трактовать матрицы, как
		расположенные в памяти плиткой (не путать с loop tiling).
		Расположение матрицы A плиткой (квадратной для простоты)
		размером TxT означает, что i:j элемент матрицы располагается
		в плитке с координатами (i/T):(j/T) на позиции (i%T):(j%T).
		Плитки располагаются в памяти друг за другом.

		При таком расположении переход от элемента i:j и к элементу
		(i + 1):j, и к элементу i:(j + 1) часто может быть осуществлён
		внутри одной плитки, и не приводить к смене страниц при
		обращении к памяти.

		Задание будет считаться выполненным, если в хранилище будут
		исходные тексты программ и текстовый файл с результатами
		измерения времён их работы. Чем больше тестов, тем лучше.
	
	5. Программа созданная в результате выполнения этого задания должна быть
		собрана из двух объектных файлов, содержащих, как минимум,
		три функции. Первый объектный файл должен быть получен из
		исходного текста на Си (или Си++) и содержать кроме функции
		main ещё и некую функцию, которой можно передать несколько
		чисел для вывода на консоль при помощи printf (допустим,
		это функция F).
		
		Второй объектный файл должен быть получен из текста на
		ассемблере и содержать код, который соответствует ABI вызова
		функции из Си. То есть, из модуля на Си этот код должен
		выглядеть как функция.

		Эта написанная на ассемблере функция должна принимать два
		аргумента: double и int, проводить с ними некие операции (не
		особо важно, какие, но разнообразие в решениях приветствуется)
		и вызывать функцию F для печати результатов этих операций.

		Задание будет считаться выполненным если в хранилище будут
		расположены исходные тексты на ассемблере, Си (Си++) и
		файл с командами компиляции исходных текстов и сборки
		готовой программы.

		Подсказки:

			5.1. nasm -hf выведет список поддерживаемых nasm-ом
				форматов объектных файлов.

			5.2. Обычно, пакеты компиляторов для Си/Си++ позволяют
				связывать объектные файлы через интерфейс
				стандартной утилиты для компиляции. Например:

					gcc main.o asm.o -o executable

				gcc - это не компилятор для Си, а некая
				оболочка над набором утилит, транслирующих
				программы на Си и собирающих исполняемые файлы.

	6. Задача проста: нужно перевести процессор в 32-битовый защищённый
		режим, после чего следует вызвать функцию на Си, которая
		что-нибудь выводит на экран. Для получения загружаемого образа
		с кодом на Си нужно использовать программу LD из пакета
		binutils. Есть для Windows в составе Cygwin и MinGW. Для
		Mac OS X можно поискать здесь:

			www.macports.org/ports.php?by=name&substr=binutils
	
	7. В этой задаче нужно использовать результат задания 3 и немного
		документации AMD или Intel, Википедии
		http://en.wikipedia.org/wiki/IDT либо же
		http://wiki.osdev.org/IDT

		Использовать всё это богатство нужно для того, чтобы
		написать программу, состоящую из нескольких модулей, со
		следующим содержимым:

			7.1. Кода на ассемблере, который переводит
				процессор в 32-битовый защищённый режим.

			7.2. Код на ассемблере вызываемой из Си функции, которая
				умеет загружать IDT при помощи команды LIDT.
				
				Дополнение по мотивам занятия. Вот этот вот
				код

					$ cat lidt.asm 
					bits 32
						lidt [ebp + 4]
				
				транслируется и работает, как нужно. По адресу
				ebp + 4 (или любому другому) должен
				располагаться дескриптор таблицы прерываний,
				пара значений:

					dw	limit
					dd	baseaddress

			7.3. Кода на Си (в виде набора функций, естественно),
				управление на который нужно передать после
				перевода процессора в защищённый режим
				во время выполнения 7.1

		Код на Си должен сформировать таблицу с дескрипторами
		прерываний, среди которых обязательно должен быть обработчик
		для прерывания 13 - прерывания, генерируемого самим
		процессором при доступе по недопустимому адресу - General
		Protection Fault.

		Программа на Си должна должна вызвать эту исключительную
		ситуацию, обратившись по недопустимому адресу. Это можно
		устроить, если по адресу, находящемуся за limit-ом сегменда
		данных, который для решения этой задачи можно установить
		в размере нескольких мегабайтов.

		При возникновении прерывания, на экран должно выводится
		некое осмысленное сообщение о нём.

		За эту задачу можно получить много дополнительных плюсов по
		двум причинам.

			7.4. Если в сообщении о прерывании будет выводиться
				информация о том, по какому адресу возникла
				ошибка обращения к памяти.

			7.5 Если в коде на Си обращения к памяти будут
				происходить в цикле по псевдослучайным адресам.
				И если обработчик прерываний будет
				восстанавливать работу этой программы после
				печати своего сообщения об ошибке.

	8. Суперзадание, выполнение которого обеспечивает допуск и много
		плюсиков даже в случае невыполнения предыдущих. Нужно
		организовать исполнение нескольких процессов в многозадачном
		режиме. Каждый процесс должен выводить значение некоторого
		постоянно увеличивающегося счётчика в свою область экрана.
		Переключение между задачами должно осуществляться по нажатию
		клавиши на клавиатуре. 

		Основными трудностями в этой задаче, теоретически, являются:

			8.1. Работа с контроллером прерываний. Но эта работа
				хорошо описана в http://wiki.osdev.org/PIC

				И мы обсудили, что такое Master и Slave
				контроллеры, и как НЕ включать Slave.

				Здесь же нужно не забывать про посылку
				контроллеру команды EOI.

			8.2. Нужно правильно разбирать содержимое стека при
				возникновении прерывания. Это зависит и от того,
				при помощи какого шлюза происходит переход на
				обработку прерывания (шлюз прерывания или
				шлюз ловушки), и от того, как сгенерировано
				прерывание.

				Все случаи описаны в документации AMD или Intel.

				Часть состояния задачи будет иногда находится
				в стеке: это EIP - указатель инструкции, EFLAGS
				- флаги и т.д.

			8.3. Переключение задач. Для того, чтобы переключаться
				между задачами, нужно сохранять и
				восстанавливать контекст исполнения. Для этого
				надо сохранять и восстанавливать регистры.

				Некоторая непрямолинейность нужна при
				сохранении и восстановлении содержимого
				регистров EIP, EFLAGS, ESP.

				Может показаться странным, но проще всего это
				можно сделать при помощи инструкции IRET,
				которая позволяет одновременно загрузить и
				EIP и EFLAGS, что нужно для согласованного
				сброса бита прерываний.

				В современных процессорах есть ещё инструкция
				SYSEXIT, но для её использования нужна
				настройка кучи всяких разных деталей.

			8.4. Нужно придумать, как один и тот же код, в который
				заложена одинаковая "картина" раскладки
				памяти.

				Для этого можно использовать сегментные
				регистры, настроив разные дескрипторы для
				разных задач, настроенные на разные области
				памяти.

				Однако, такой подход не позволит на одном лишь
				чистом Си запрограммировать работу с буфером
				видеопамяти, ведь, сегменты линейные и придётся
				как-то использовать несколько сегментных
				регистров для организации доступа в общую
				для всех процессов область 0xb8000.

				Другой способ добиться размещения задач по
				разным физическим адресам - использование
				страничной трансляции с настройкой
				страниц на области памяти так, как это нужно.

				Настраивать и таблицы страниц, и таблицы
				дескрипторов сегментов, и таблицы прерываний
				лучше на Си. Вполне можно писать нечто в стиле:

					uint32_t * level2 = pagetable[VA >> 22];
					level2[(VA >> 12) & 0x3ff]
						= pagetableentry(PhysAddr);

			8.5. Наконец, нужно некоторым образом задачи
				формировать. Для этого нужно некоторым образом
				инициализировать их контекст. Чтобы первая
				передача управления на контекст привела к
				осмысленным результатам. Здесь вполне можно в
				качестве начального создать контекст, с
				нулевыми регистрами общего назначения и с
				правильными ESP (таким, какой придумается), EIP
				(который может указывать на примерно такой код:

					call main
	
				точку входа), EFLAGS (в котором должны быть
				корректно установлены флаги), CR3 (указывающий
				на соответствующую данной задаче таблицу
				трансляций).

				Понятно, что речь идёт о некоторых полях в
				некоторых структурах данных.
